import{exec}from"child_process";import{createInterface}from"readline";import fs from"fs-extra";import{extname,join}from"path";import{minify}from"terser";export async function runInDir(e,t){return new Promise(((r,o)=>{exec(e,{cwd:t},((e,t,n)=>{e?o(e):r(t||n)}))}))}export async function promptUser(e){const{value:t}=await new Promise((t=>{const r=createInterface({input:process.stdin,output:process.stdout});r.question(e,(e=>{r.close(),t({value:e})}))}));return t}export async function minifyReactChunks(e,t){fs.readdirSync(e).forEach((async r=>{const o=join(e,r);if(fs.statSync(o).isFile()&&".js"===extname(o)&&r.startsWith("react")){const e=fs.readFileSync(o,"utf-8");try{const o=await minify(e),n=join(t,r);fs.writeFileSync(n,o.code)}catch(e){console.log(`Error occurred while minifying ${o}:\n ${e}`)}}}))}export async function getViteDevPort(){const e=join(process.cwd(),"vite.config.js");return(await import(`file://${e}`)).default.port||3001}export async function getVitePreviewPort(){const e=join(process.cwd(),"vite.config.js");return(await import(`file://${e}`)).default.preview.port||3201}export function camelCase(e){return e.replace(/-([a-z])/g,(e=>e[1].toUpperCase()))}export function capitalize(e){return e.charAt(0).toUpperCase()+e.slice(1)}