#!/usr/bin/env node
import{program}from"commander";import fs from"fs-extra";import path from"path";import colors from"colors";import ora from"ora";import{fileURLToPath}from"url";import{camelCase,capitalize,getViteDevPort,getVitePreviewPort,minifyReactChunks,promptUser,runInDir}from"./utils/index.js";const __dirname=path.dirname(fileURLToPath(import.meta.url)),INewTypes={APP:"app",MODULE:"module",MODULE_CLASS:"moduleClass",SERVICE:"service",MODULE_COMPONENT:"moduleComponent"};function isTypeValid(e){return Object.values(INewTypes).includes(e)}function isNameValid(e){return e.length>0}function getTypeTemplateDir(e){return path.join(__dirname,"templates",e)}function getTypeProjectDir(e,o){return e===INewTypes.APP?path.join(process.cwd(),o):path.join(process.cwd(),"src",o)}async function getContext(e,o){const r={[INewTypes.APP]:generateNewApp,[INewTypes.MODULE]:generateNewModule,[INewTypes.MODULE_COMPONENT]:generateNewModuleComponent,[INewTypes.SERVICE]:generateNewService,[INewTypes.MODULE_CLASS]:generateNewModuleClass};if(e===INewTypes.SERVICE||e===INewTypes.MODULE||e===INewTypes.MODULE_COMPONENT||e===INewTypes.MODULE_CLASS){if(fs.existsSync(path.join(process.cwd(),"src",o))){if("n"!==(await promptUser(`${e} for ${o} already exists, override? ${colors.cyan("[y/n]")} `)).toLowerCase())return void console.log(colors.red("\nAborting..."))}}return r[e]}async function generateNewApp({name:e,templateDir:o,projectDir:r}){const n=ora(),t=ora();try{n.start(colors.cyan(`Generating app ${e}...`)),await fs.copy(o,r);const a=path.join(r,"index.html"),i=(await fs.readFile(a,"utf-8")).replace(/\$1/g,e);await fs.writeFile(a,i);const s=path.join(r,"package.json"),c=await fs.readJson(s);c.name=e;const l=JSON.stringify(c,null,2);await fs.writeFile(s,l),n.succeed(colors.green(`Your app ${e} has been generated successfully.`)),t.start(colors.cyan(`Installing dependencies for ${e}...`)),await runInDir("npm install",r),t.succeed(colors.green("Dependencies installed!")),console.log("\n"),console.log(colors.yellow("\nRun: "),`\ncd ${e}\nnpm run dev`),process.exit(0)}catch(e){throw t.isSpinning&&t.fail(colors.red("An error occurred while installing dependencies.")),n.isSpinning&&n.fail(colors.red("Generation process interrupted.")),e}}async function generateNewModule({name:e,templateDir:o,projectDir:r}){await generateNewModuleComponent({name:e,templateDir:o,projectDir:r}),await generateNewService({name:e,templateDir:o,projectDir:r}),await generateNewModuleClass({name:e,templateDir:o,projectDir:r})}async function generateNewModuleClass({name:e,templateDir:o,projectDir:r}){const n=ora();n.start(colors.cyan(`Generating module class ${e}...`));try{const n=camelCase(e),t=capitalize(n);await fs.copy(o,r);const a=path.join(r,"$1.module.ts"),i=path.join(r,`${n}.module.ts`);await fs.rename(a,i);const s=(await fs.readFile(i,"utf-8")).replace(/\$1/g,n).replace(/\$2/g,t);await fs.writeFile(i,s)}catch(e){throw n.isSpinning&&n.fail(colors.red("Generation process interrupted.")),e}}async function generateNewModuleComponent({name:e,templateDir:o,projectDir:r}){}async function generateNewService({name:e,templateDir:o,projectDir:r}){}program.command("new <type> <name>").description(`Generate a new unit - accepts [${Object.values(INewTypes).join(", ")}]`).action((async(e,o)=>{try{if(!isTypeValid(e))throw new Error(`Type ${e} is not supported`);if(!isNameValid(o))throw new Error(`Name ${o} is not valid`);const r=getTypeTemplateDir(e),n=getTypeProjectDir(e,o),t=await getContext(e,o);if(!t)return;await t({name:o,templateDir:r,projectDir:n})}catch(e){console.log(colors.red(e.message)),e.cmd&&console.log(colors.yellow(`Try running ${colors.cyan(e.cmd)} manually to trace the error.`))}})),program.command("dev").description("Runs the application in development mode").action((async()=>{const e=ora();try{e.start(colors.cyan("Running development server..."));const o=process.cwd(),r=`http://localhost:${await getViteDevPort()}`;runInDir("vite --config vite.config.js",o),console.log("\n"),e.succeed(colors.green("Running: ")+colors.cyan(`${r}...`))}catch(o){e.isSpinning&&e.fail(colors.red("Failed to run development server.")),console.log(colors.red(o.message)),o.cmd&&console.log(colors.yellow(`Try running ${colors.cyan(o.cmd)} manually to trace the error.`))}})),program.command("build").description("Builds the application for production").action((async()=>{const e=ora();try{e.start(colors.cyan("Building application..."));const o=process.cwd();await runInDir("vite build --config vite.config.js",o),await minifyReactChunks(`${o}/dist/assets`,`${o}/dist/assets`),e.succeed(colors.green("Application built successfully.")),console.log("\n"),console.log(colors.yellow("Preview: ")+"rgen serve")}catch(o){e.isSpinning&&e.fail(colors.red("Failed to build application.")),console.log(colors.red(o.message)),o.cmd&&console.log(colors.yellow(`Try running ${colors.cyan(o.cmd)} manually to trace the error.`))}})),program.command("serve").description("Serves the application in production mode").action((async()=>{const e=ora();try{e.start(colors.cyan("Running preview server..."));const o=process.cwd(),r=`http://localhost:${await getVitePreviewPort()}`;runInDir("vite preview --config vite.config.js",o),console.log("\n"),e.succeed(colors.green("Running: ")+colors.cyan(`${r}...`))}catch(o){e.isSpinning&&e.fail(colors.red("Failed to run preview server.")),console.log(colors.red(o.message)),o.cmd&&console.log(colors.yellow(`Try running ${colors.cyan(o.cmd)} manually to trace the error.`))}})),program.parse(process.argv);